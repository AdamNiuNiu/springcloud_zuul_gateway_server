
spring:
  application:
    name: gateway-server-my

server:
  port: 8080

zuul:
  routes:
    eureka-provider-demo-my: #路由名称，名称任意，保持所有路由名称唯一
      path: /provider/**
      serviceId: eureka-provider-demo-my #微服务名称，网关会从eureka中获取该服务名称下的服务实例的地址,指定服务id，从Eureka中找到服务的ip和端口
    #简化写法
#    eureka-provider-demo-my: /provider/**
      # 例子：将请求转发到http://localhost:31200/course
#      url: http://127.0.0.1:31002 #也可指定url，此url也可以是外网地址
      strip-prefix: false #true：代理转发时去掉前缀，false:代理转发时不去掉前缀
      sensitiveHeaders:  #默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名单，如果设置了具体的头信息则不会传到下游服务
      #   ignoredHeaders: 默认为空表示不过虑任何头
  ratelimit:
    enabled: true
    policies:
        eureka-provider-demo-my:
          limit: 3 #一分钟内该服务的api只能访问3次，超过3次，网关就会报错
          refresh-interval: 60
          type: origin
#限流方式
#  user：认证用户名或者匿名，针对某个用户进行限流。
#  origin：客户机IP，针对请求的客户机IP进行限流。
#  url：针对某个特定的url进行限流。
#  serviceId：针对某个服务进行限流。
eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: http://localhost:50101/eureka/
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: 127.0.0.1
    instance-id: gateway-server-my:8080 #指定实例id
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间

#阿波罗配置中心
apollo:
  bootstrap:
    enabled: true
    namespaces: application
  meta: http://192.168.106.129:8080
app:
  id: zuul-config
env: DEV